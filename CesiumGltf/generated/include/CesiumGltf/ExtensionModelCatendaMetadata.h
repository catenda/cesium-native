// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#pragma once

#include <CesiumGltf/ExtensionCatendaMetadataObjectMetadata.h>
#include <CesiumGltf/Library.h>
#include <CesiumUtility/ExtensibleObject.h>
#include <string>
#include <unordered_map>

namespace CesiumGltf {
    /**
     * @brief glTF extension that provides metadata for the objects of a Catenda model.
     */
    struct CESIUMGLTF_API ExtensionModelCatendaMetadata final : public CesiumUtility::ExtensibleObject {
        static constexpr const char* TypeName = "ExtensionModelCatendaMetadata";
        static constexpr const char* ExtensionName = "CATENDA_metadata";

        /**
         * @brief A dictionary of all metadata, where the key is the id of the object.
         */
        std::unordered_map<std::string, CesiumGltf::ExtensionCatendaMetadataObjectMetadata> objects;

        /**
         * @brief Calculates the size in bytes of this object, including the contents of all collections, pointers, and strings.
         * This will NOT include the size of any extensions attached to the object.
         * Calling this method may be slow as it requires traversing the object's entire structure.
         */
        int64_t getSizeBytes() const {
          int64_t accum = 0;
          accum += int64_t(sizeof(ExtensionModelCatendaMetadata));
          accum += CesiumUtility::ExtensibleObject::getSizeBytes() - int64_t(sizeof(CesiumUtility::ExtensibleObject));
          accum += int64_t(this->objects.bucket_count() * (sizeof(std::string) + sizeof(CesiumGltf::ExtensionCatendaMetadataObjectMetadata)));
      for(const auto& [k, v] : this->objects) {
accum += int64_t(k.capacity() * sizeof(char) - sizeof(std::string));
accum += v.getSizeBytes() - int64_t(sizeof(CesiumGltf::ExtensionCatendaMetadataObjectMetadata));
      }
          return accum;
        }

    };
} // namespace CesiumGltf
