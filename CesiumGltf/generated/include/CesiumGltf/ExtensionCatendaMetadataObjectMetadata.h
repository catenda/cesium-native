// This file was generated by generate-classes.
// DO NOT EDIT THIS FILE!
#pragma once

#include <CesiumGltf/ExtensionCatendaMetadataObjectMetadataAttribute.h>
#include <CesiumGltf/Library.h>
#include <CesiumUtility/ExtensibleObject.h>
#include <optional>
#include <string>
#include <unordered_map>

namespace CesiumGltf {
    /**
     * @brief Metadata for an object.
     */
    struct CESIUMGLTF_API ExtensionCatendaMetadataObjectMetadata final : public CesiumUtility::ExtensibleObject {
        static constexpr const char* TypeName = "ExtensionCatendaMetadataObjectMetadata";

        /**
         * @brief ID of the parent object, if any.
         */
        std::optional<std::string> parentId;

        /**
         * @brief Name of the object type.
         */
        std::optional<std::string> objectType;

        /**
         * @brief A dictionary of all attributes for the current object, where the key is the id of the attribute.
         */
        std::unordered_map<std::string, CesiumGltf::ExtensionCatendaMetadataObjectMetadataAttribute> attributes;

        /**
         * @brief Calculates the size in bytes of this object, including the contents of all collections, pointers, and strings.
         * This will NOT include the size of any extensions attached to the object.
         * Calling this method may be slow as it requires traversing the object's entire structure.
         */
        int64_t getSizeBytes() const {
          int64_t accum = 0;
          accum += int64_t(sizeof(ExtensionCatendaMetadataObjectMetadata));
          accum += CesiumUtility::ExtensibleObject::getSizeBytes() - int64_t(sizeof(CesiumUtility::ExtensibleObject));
          if(this->parentId) {
    accum += int64_t(this->parentId->capacity() * sizeof(char));
  }
if(this->objectType) {
    accum += int64_t(this->objectType->capacity() * sizeof(char));
  }
accum += int64_t(this->attributes.bucket_count() * (sizeof(std::string) + sizeof(CesiumGltf::ExtensionCatendaMetadataObjectMetadataAttribute)));
      for(const auto& [k, v] : this->attributes) {
accum += int64_t(k.capacity() * sizeof(char) - sizeof(std::string));
accum += v.getSizeBytes() - int64_t(sizeof(CesiumGltf::ExtensionCatendaMetadataObjectMetadataAttribute));
      }
          return accum;
        }

    };
} // namespace CesiumGltf
